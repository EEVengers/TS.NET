name: Build & test
on: [push]
jobs:
  build:   
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        dotnet-version: [ '9.0.x' ]
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore
        working-directory: source
      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: source
      - name: Test
        run: dotnet test --no-restore --verbosity normal
        working-directory: source
      - name:  Publish TS.NET.Engine
        working-directory: build-scripts
        run:   |
               if [ "$RUNNER_OS" == "Linux" ]; then
                    dotnet publish ../source/TS.NET.Engine/TS.NET.Engine.csproj -r linux-x64 -c Release --self-contained /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeNativeLibrariesForSelfExtract=true --output ../builds/TS.NET.Engine/linux-x64
               elif [ "$RUNNER_OS" == "Windows" ]; then
                    powershell -ExecutionPolicy Bypass -File "TS.NET.Engine (win-x64).ps1"
               else
                    echo "$RUNNER_OS not supported"
                    exit 1
               fi
        shell: bash
      - name: Upload TS.NET.Engine win-x64 build
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: TS.NET.Engine-win-x64
          path: builds/TS.NET.Engine/win-x64/*
      - name: Upload TS.NET.Engine linux-x64 build
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: TS.NET.Engine-linux-x64
          path: builds/TS.NET.Engine/linux-x64/*
      - name:  Publish TS.NET.Calibration.UI
        working-directory: build-scripts
        run:   |
               if [ "$RUNNER_OS" == "Linux" ]; then
                    dotnet publish ../source/TS.NET.Calibration.UI/TS.NET.Calibration.UI.csproj -r linux-x64 -c Release --self-contained /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeNativeLibrariesForSelfExtract=true --output ../builds/TS.NET.Calibration.UI/linux-x64
               elif [ "$RUNNER_OS" == "Windows" ]; then
                    powershell -ExecutionPolicy Bypass -File "TS.NET.Calibration.UI (win-x64).ps1"
               else
                    echo "$RUNNER_OS not supported"
                    exit 1
               fi
        shell: bash
      - name: Upload TS.NET.Calibration.UI win-x64 build
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: TS.NET.Calibration.UI-win-x64
          path: builds/TS.NET.Calibration.UI/win-x64/*
      - name: Upload TS.NET.Calibration.UI linux-x64 build
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: TS.NET.Calibration.UI-linux-x64
          path: builds/TS.NET.Calibration.UI/linux-x64/*          